#include "logstream.h"

#include <boost/format.hpp>

namespace pgn
{
	//----------------------------------------------------------------------------
    cLogStream::cLogStream()
        :mName("default")
        ,mDisplayLevel( eLogLevel::DBG )
        ,mFormat( boost::format("%s: %s\n") )
        ,mChannel( nullptr )
    {
        mLevelNames[0] = "ERR";
        mLevelNames[1] = "WRN";
        mLevelNames[2] = "INF";
        mLevelNames[3] = "DBG";
    }

	//----------------------------------------------------------------------------
    void cLogStream::SetFormat(const std::string (&zLevelNames)[eLogLevel::num], const boost::format& zFmt)
    {
        for(int i=0;i< int(eLogLevel::num);++i)
            mLevelNames[i] = zLevelNames[i];
        mFormat = zFmt;
    }

	//----------------------------------------------------------------------------
    void cLogStream::Log(const eLogLevel zLevel, const std::string& zMsg)
    {
        if(mChannel && (int(zLevel) <= int(mDisplayLevel)))
            (*mChannel) << ( mFormat % mLevelNames[int(zLevel)] % zMsg);
    }

	//----------------------------------------------------------------------------
	void InitFromConfig(cLogStream& zLog, const cCfgTree& cfg, const std::string& zBase)
	{
		// TODO: Base is the base string, e.g. Logging.OpenCL
		// Need to have robust find facilities for the config: Get it if exists else ignore. 
		// This should actually be autogenerated from a description file.So, LOW PRIORITY. 
	}
}